/*
 * Copyright (c) 2011-2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 *  ======== config.bld ========
 *  Sample Build configuration script
 */

/* Exported tools locations to supercede defaults */
var arm_cgtools_rootdir = java.lang.System.getenv("TMS470CGTOOLPATH");
var c6x_cgtools_rootdir = java.lang.System.getenv("C6000CGTOOLPATH");

//print("arm_cgtools_rootdir = " + arm_cgtools_rootdir);
//print("c6x_cgtools_rootdir = " + c6x_cgtools_rootdir);

if (c6x_cgtools_rootdir != "") {
    /* Setup for C64T target */
    var C64T = xdc.useModule('ti.targets.elf.C64T');
    C64T.rootDir = c6x_cgtools_rootdir;
    C64T.ccOpts.suffix += " -mi10 -mo ";
    /* Set default platform and list of all interested platforms for c64T */
    C64T.platforms = ["ti.platform.omap4430.dsp"];
    C64T.platform = C64T.platforms[0];

    Build.targets.$add(C64T);
}

if (arm_cgtools_rootdir != "") {
/* Setup for M3 target */
    var M3 = xdc.useModule('ti.targets.arm.elf.M3');
    M3.rootDir = arm_cgtools_rootdir;
    M3.ccOpts.suffix += " --embed_inline_assembly -ms -pds=71";
    M3.lnkOpts.prefix += " --retain=.resource_table";
    /* Set default platform and list of all interested platforms for M3 */
    M3.platforms = [
        "ti.platform.omap4430.core0",
        "ti.platform.omap4430.core1"
    ];
    M3.platform = M3.platforms[0];

    Build.targets.$add(M3);
}

/* Eliminating profiles that aren't debug or release */
for (var t = 0; t < Build.targets.length; t++) {
//    print("Inspecting target " + Build.targets[t]);
    for (prof in Build.targets[t].profiles) {
//      print("Inspecting profile " + prof);
        if ((prof != "debug") && (prof != "release")) {
//          print("Deleting profile " + Build.targets[t].profiles[prof]);
            delete Build.targets[t].profiles[prof];
        }
    }
}